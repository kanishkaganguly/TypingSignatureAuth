package my_package;


import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.LinkedList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author nightstalker
 */
public class Signature_Authenticator extends javax.swing.JFrame {

    //TRAINING PHASE VARIABLES
    boolean started = false;
    long start_time = 0;
    long end_time = 0;
    long spaceStart_time = 0;
    long spaceEnd_time = 0;
    long keyStart_time = 0;
    long keyEnd_time = 0;
    int counter = 0;
    LinkedList<Long> total_time_store = new LinkedList<>();
    LinkedList<Long> space_time_store = new LinkedList<>();
    LinkedList<Long> key_time_store = new LinkedList<>();
    static int TRAINING_COUNT = 10;
    boolean trained = false;

    //AUTHENTICATION PHASE VARIABLES
    /**
     * Creates new form main
     */
    public Signature_Authenticator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        auth_frame = new javax.swing.JFrame();
        auth_label = new javax.swing.JLabel();
        auth_separator = new javax.swing.JSeparator();
        auth_text = new javax.swing.JLabel();
        auth_instructions = new javax.swing.JLabel();
        auth_type = new javax.swing.JTextField();
        auth_alert = new javax.swing.JLabel();
        auth_retry = new javax.swing.JButton();
        auth_progress = new javax.swing.JProgressBar();
        auth_start = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        test_text = new javax.swing.JLabel();
        type_here = new javax.swing.JTextField();
        total_time = new javax.swing.JLabel();
        start_btn = new javax.swing.JButton();
        progress = new javax.swing.JProgressBar();
        space_time = new javax.swing.JLabel();
        key_time = new javax.swing.JLabel();
        auth_show = new javax.swing.JButton();

        auth_frame.setTitle("Authentication");
        auth_frame.setResizable(false);

        auth_label.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        auth_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        auth_label.setText("Authentication Phase");

        auth_text.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        auth_text.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        auth_text.setText("The moon is made of cheese");
        auth_text.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        auth_instructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        auth_instructions.setText("Please type above text here in your normal typing style");

        auth_alert.setForeground(new java.awt.Color(255, 0, 0));
        auth_alert.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        auth_alert.setText("You Have Not Been Authenticated.");
        auth_alert.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        auth_retry.setText("Try Again");

        auth_progress.setMaximum(2);
        auth_progress.setToolTipText("");
        auth_progress.setString("Trial: 0/2");
        auth_progress.setStringPainted(true);

        auth_start.setText("Start Authentication");

        javax.swing.GroupLayout auth_frameLayout = new javax.swing.GroupLayout(auth_frame.getContentPane());
        auth_frame.getContentPane().setLayout(auth_frameLayout);
        auth_frameLayout.setHorizontalGroup(
            auth_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(auth_separator)
            .addGroup(auth_frameLayout.createSequentialGroup()
                .addGroup(auth_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(auth_frameLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(auth_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(auth_frameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(auth_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(auth_frameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(auth_instructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(auth_frameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(auth_type))
                    .addGroup(auth_frameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(auth_alert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(auth_frameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(auth_progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, auth_frameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(auth_start, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(auth_retry, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        auth_frameLayout.setVerticalGroup(
            auth_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(auth_frameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(auth_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(auth_separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(auth_text)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(auth_instructions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(auth_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(auth_progress, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(auth_alert)
                .addGap(18, 18, 18)
                .addGroup(auth_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(auth_retry)
                    .addComponent(auth_start))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Typing Authentication");
        setResizable(false);

        title.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Typing Signature Based Authentication");

        test_text.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        test_text.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        test_text.setText("The moon is made of cheese");
        test_text.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        type_here.setEnabled(false);
        type_here.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                type_hereKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                type_hereKeyReleased(evt);
            }
        });

        total_time.setText("Average Time Taken: ");

        start_btn.setText("Begin Training");
        start_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                start_btnMouseClicked(evt);
            }
        });

        progress.setString("Trained: 0/10");
        progress.setStringPainted(true);

        space_time.setText("Average Time Between Words:");

        key_time.setText("Average Keypress Time:");

        auth_show.setText("Authentication");
        auth_show.setEnabled(false);
        auth_show.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                auth_showMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(test_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(type_here)
                    .addComponent(total_time, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(start_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(space_time, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(key_time, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(auth_show, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(test_text)
                .addGap(18, 18, 18)
                .addComponent(type_here, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total_time)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(space_time)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(key_time)
                .addGap(18, 18, 18)
                .addComponent(start_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(auth_show)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void start_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_start_btnMouseClicked
        type_here.grabFocus();
        progress.setValue(0);
        progress.setMaximum(10);
        progress.setMinimum(0);
        progress.setString("Trained: 0/10");
        type_here.setEnabled(true);
        start_btn.setEnabled(false);
        started = false;
        auth_show.setEnabled(false);
    }//GEN-LAST:event_start_btnMouseClicked

    private void type_hereKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_type_hereKeyReleased
        //GIVE FOCUS TO TYPING AREA
        type_here.grabFocus();

        //GET CURRENT TEXT TYPED
        String current_text = type_here.getText();

        //CHECK IF TEXT IS CORRECT
        if (test_text.getText().contains(current_text)) {

            //GET + STORE keypress_time 
            keyEnd_time = System.currentTimeMillis();
            key_time(keyStart_time, keyEnd_time);

            //SET NORMAL COLOR            
            type_here.setBackground(Color.WHITE);

            //IF ENTIRE TEXT TYPED
            if (current_text.equals(test_text.getText())) {
                type_here.setText(""); //CLEAR TYPING AREA
                end_time = System.currentTimeMillis(); //GET total_time
                total_time(start_time, end_time); //STORE total_time
                started = false; //RESET start_var
                counter += 1; //UPDATE progress_counter
                update_progress(counter); //UPDATE progress_bar
                System.out.println("END LOOP");
                spaceStart_time = 0; //RESET spacebar_startTime
                spaceEnd_time = 0; //RESET spacebar_endTime
                start_time = 0; //RESET total_startTime
                end_time = 0; //RESET total_endTime
            }

            //IF TRAINING FINISHED
            if (counter == TRAINING_COUNT) {
                update_progress(counter); //UPDATE progress_bar
                type_here.setEnabled(false); //DISABLE typing_area
                start_btn.setEnabled(true);
                System.out.println("END TRAINING");
                auth_show.setEnabled(true);
                trained = true;
            }
        } else {
            //SHOW ERROR
            type_here.setBackground(Color.red);
        }
    }//GEN-LAST:event_type_hereKeyReleased

    private void type_hereKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_type_hereKeyPressed
        //RESET AND START keypress_time
        keyStart_time = 0;
        keyEnd_time = 0;
        keyStart_time = System.currentTimeMillis();

        //START TIMER WHEN STARTS TYPING
        if ("".equals(type_here.getText()) && false == started) {
            System.out.println("START TIMER");
            System.out.println("START SPACE TIMER");
            started = true;
            start_time = System.currentTimeMillis();
            spaceStart_time = System.currentTimeMillis();
        }

        //IF spacebar TYPED
        if (evt.getKeyChar() == KeyEvent.VK_SPACE) {
            spaceEnd_time = System.currentTimeMillis(); //GET time_elapsed
            System.out.println("END SPACE TIMER");
            space_time(spaceStart_time, spaceEnd_time); //STORE + DISPLAY time_elapsed
            spaceStart_time = 0; //RESET spacebar_startTime
            spaceEnd_time = 0; //RESET spacebar_endTime
            System.out.println("START SPACE TIMER");
            spaceStart_time = System.currentTimeMillis(); //START space_time
        }
    }//GEN-LAST:event_type_hereKeyPressed

    private void auth_showMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_auth_showMouseClicked
        if (trained == true) {
            auth_frame.setVisible(true);
        }
    }//GEN-LAST:event_auth_showMouseClicked

    //DISPLAY spacebar_time AND STORE
    public void key_time(long start, long end) {
        long time = (end - start);
        key_time_store.push(time);
        print_keyTime();
    }

    //DISPLAY spacebar_time AND STORE
    public void space_time(long start, long end) {
        long time = (end - start);
        space_time_store.push(time);
        print_spaceTime();
    }

    //DISPLAY total_time AND STORE
    public void total_time(long start, long end) {
        long time = (end - start) / 1000;
        total_time_store.push(time);
        print_time();
    }

    //UPDATE progress_bar
    public void update_progress(int n) {
        progress.setValue(n);
        progress.setString("Trained: " + n + "/10");
    }

    //PRINT TIME STORED
    public void print_time() {
        long sum = 0;
        long avg = 0;
        System.out.println("** AVG. TIME **");
        for (int x = 0; x < total_time_store.size(); x++) {
            sum += total_time_store.get(x);
        }
        avg = sum / total_time_store.size();
        total_time.setText("Average Time Taken: " + avg + " s");
        System.out.println("Average Time Taken: " + avg + " s");
        System.out.println("");
    }

    //PRINT TIME STORED
    public void print_keyTime() {
        long sum = 0;
        long avg = 0;
        System.out.println("== AVG. KEY TIME ==");
        for (int x = 0; x < key_time_store.size(); x++) {
            sum += key_time_store.get(x);
        }
        avg = sum / key_time_store.size();
        key_time.setText("Average Keypress Time: " + avg + " ms");
        System.out.println("Average Keypress Time: " + avg + " ms");
        System.out.println("");
    }

    //PRINT spacebar TIME STORED
    public void print_spaceTime() {
        long sum = 0;
        long avg = 0;
        System.out.println("-- SPACEBAR TIME --");
        for (int x = 0; x < space_time_store.size(); x++) {
            sum += space_time_store.get(x);
        }
        avg = sum / space_time_store.size();
        space_time.setText("Average Spacebar Time: " + avg + " ms");
        System.out.println("Average Spacebar Time: " + avg + " ms");
        System.out.println("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Signature_Authenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Signature_Authenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Signature_Authenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Signature_Authenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Signature_Authenticator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel auth_alert;
    private javax.swing.JFrame auth_frame;
    private javax.swing.JLabel auth_instructions;
    private javax.swing.JLabel auth_label;
    private javax.swing.JProgressBar auth_progress;
    private javax.swing.JButton auth_retry;
    private javax.swing.JSeparator auth_separator;
    private javax.swing.JButton auth_show;
    private javax.swing.JButton auth_start;
    private javax.swing.JLabel auth_text;
    private javax.swing.JTextField auth_type;
    private javax.swing.JLabel key_time;
    private javax.swing.JProgressBar progress;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel space_time;
    private javax.swing.JButton start_btn;
    private javax.swing.JLabel test_text;
    private javax.swing.JLabel title;
    private javax.swing.JLabel total_time;
    private javax.swing.JTextField type_here;
    // End of variables declaration//GEN-END:variables
}
